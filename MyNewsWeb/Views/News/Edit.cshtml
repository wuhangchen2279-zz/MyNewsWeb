@model MyNewsWeb.Models.NewsViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit News</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Content, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <span><b> Select Your News Image</b></span>
                <input type="file" name="newsFile" class="btn btn-default" />
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.NewsType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.NewsType, // Store selected value in Model.NewsType

               // This argument needs some explanation - here we take a Distionary<string, string>
               // and turn it into an instance of SelectList, see blog post for more details
               new SelectList(Model.NewsTypes, "Key", "Value"),

               // Text for the first 'default' option
               "- Please choose news type -",

               // A class name to put on the "<select>"
               new { @class = "form-control" }
               )
                @Html.ValidationMessageFor(model => model.NewsType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserInfoId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (ViewBag.IsUserAdmin == true)
                {
                    @Html.DropDownListFor(model => model.UserInfoId, // Store selected value in Model.UserInfoId

                            // This argument needs some explanation - here we take a Distionary<string, string>
                            // and turn it into an instance of SelectList, see blog post for more details
                            new SelectList(Model.Authors, "Key", "Value", Model.UserInfoId),

                            // Text for the first 'default' option
                            "- Please choose author -",

                            // A class name to put on the "<select>"
                            new { @class = "form-control" }
                            )
                }

                else
                {
                    @Html.HiddenFor(model => model.UserInfoId)
                    @Html.DisplayFor(model => model.FullName, new { @class = "control-label col-md-2" })
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Edit" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "ManageNews")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
